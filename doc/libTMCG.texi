\input texinfo
@c %**start of header
@documentencoding ISO-8859-1
@setfilename libTMCG.info
@include version.texi
@settitle The LibTMCG Reference Manual
@c %**end of header

@c A simple macro for optional variables. (copied from gcrypt manual)
@macro ovar{varname}
@r{[}@var{\varname\}@r{]}
@end macro

@copying
This is the reference manual of LibTMCG.

Revision $Id: libTMCG.texi,v 1.9 2006/02/12 16:12:41 stamer Exp $.

Copyright @copyright{} 2005, 2006 Heiko Stamer <@email{stamer@@gaos.org}>.

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.2
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
Texts. A copy of the license is included in the section entitled ``GNU
Free Documentation License''.
@end quotation
@end copying

@titlepage
@title The LibTMCG Reference Manual
@subtitle Version @value{VERSION}
@subtitle @value{UPDATED}
@author Heiko Stamer <@email{stamer@@gaos.org}>

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top LibTMCG Reference Manual

@insertcopying
@end ifnottex

@c **********************************************************
@c *******************  Introduction  ***********************
@c **********************************************************
@chapter Introduction
`@acronym{LibTMCG}' is a general purpose C++ library for
creating secure electronic card games. The most remarkable
feature is the absence of a trusted third party (TTP), i.e.
neither a central game server nor similar facilities are
necessary. To emphasize this point again: With the present
library there is no need for an independent referee, because
the applied protocols provide a basic level of confidentiality
and fairness by itself. Of course, we cannot avoid that
malicious players share information about their private
cards, but the protocols ensure that the shuffle of the
deck is performed randomly (presumed that at least one
player is honest) and thus the cards will be distributed
uniformly among the players. Further, no coalition can
learn the private cards of a player agains his will (except
for trivial conclusions). The corresponding cryptographic
problem, actually called ''Mental Poker'', has been studied
since 1979 (Shamir, Rivest, and Adleman) by many authors.

Our implementation relies on advanced cryptographic
techniques---the so-called zero-knowledge proofs. Using
these `building blocks' the high-level protocols minimize
the effect of coalitions and preserve the confidentiality
of the players' strategy, i.e. the players are not required
to reveal their cards at the end of the game to show that
they did not cheat.

LibTMCG is @emph{Free Software} according to the definition
of the @uref{http://www.fsf.org/licensing/essays/free-sw.html,,
Free Software Foundation}.

@c **********************************************************
@section Further reading
The cryptographic background and a detailed discussion of
the implementation issues is beyond the scope of this manual.
The interested reader is refered to the following papers:
@quotation [Sch98]
	Christian Schindelhauer.
	@emph{Toolbox for Mental Card Games.}@*
	Technical Report A-98-14, University of L@"ubeck, 1998.
@end quotation
@quotation [BS03]
	Adam Barnett and Nigel P. Smart.
	@emph{Mental Poker Revisited.}@*
	In K.G. Paterson (Ed.): Cryptography and Coding 2003,
	Lecture Notes in Computer Science 2898, pp. 370--383, 2003.
@end quotation
@quotation [St04]
	Heiko Stamer.
	@emph{Kryptographische Skatrunde.} (in German)@*
	Offene Systeme (ISSN 1619-0114), 4:10--30, 2004.@*
	@uref{http://www.gaos.org/~stamer/OS-4-2004-openskat_rev2005.pdf}
@end quotation
@quotation [St05]
	Heiko Stamer.
	@emph{Efficient Electronic Gambling: An Extended Implementation
	of the Toolbox for Mental Card Games.}@*
	Proceedings of the Western European Workshop on Research in
	Cryptology (WEWoRC 2005), Lecture Notes in Informatics P-74,
	pp. 1--12, 2005.
@end quotation

@c **********************************************************
@section Getting started
This manual describes the application programming interface
(API) of LibTMCG. All public classes and security parameters
are explained. The reader should have an advanced knowledge
in applied cryptography and C++ programming. Reference is
made at this point to the famous @cite{Handbook of Applied
Cryptography} for a brief introduction.

This document follows, in style and rarely in phrasing,
the @cite{Reference Manual of the GNU Crypto Library}.
Thus don't be surprised, if you recognize some obvious
analogies.

@c **********************************************************
@section Preparation
LibTMCG depends on the two other basic libraries. Therefore
you will need mandatory their corresponding development
files to build your application properly:
@itemize @bullet
	@item GNU Multiple Precision Arithmetic Library (@file{libgmp}),
		Version @math{\ge} 4.1.0
		
		This library provides a powerful framework for performing
		arbitrary precision arithmetic on integers. Further reasons
		for chosing this dependency are the license compatibility,
		portability, vital maintainance, and, of course, the
		reasonable performance.
		
	@item GNU Crypto Library (@file{libgcrypt}),
		Version @math{\ge} 1.2.0
		
		This library provides some basic cryptographic algorithms
		(e.g. RIPEMD-160) and an easily usable interface to obtain
		cryptographically strong pseudo random numbers.
		
@end itemize
We suppose that the reader is familiar with these libraries
because their correct installation and configuration is
crucial to the security of the entire application.

@c **********************************************************
@section Headers and namespaces
The interface definitions of the classes and the constant security
parameters@footnote{These parameters are fixed at compile time.
Please don't change anything unless you know exactly what you are
doing, and what the dangers are! Beside the apparent security
concerns you will probably break the compatibility with other
applications.} are provided by the central header file
@file{libTMCG.hh}. You have to include this file in all of your
sources, either directly or through some other method.

@example
#include <libTMCG.hh>
@end example

There are no uniform C++ namespaces for the most parts of the
library. Some classes have the common prefix @code{TMCG_*} or
@code{VTMF_*} while others are composed of the author names
of the related research paper. Further there are internally
used C functions which might produce conflicting names. These
function names are prepended by @code{mpz_*} because they are
extensions for the integer support of th GNU Multiple Precision
Arithmetic Library.

@c **********************************************************
@section Building sources
If you want to compile a source file including the @file{libTMCG.hh}
header file, you must make sure that the compiler can find it in the
directory hierarchy. This is accomplished by adding the path of the
corresponding directory to the compilers include file search path
(via the @option{-I} option).

However, the path to the include file is determined at the time the
source is configured. To solve this problem, LibTMCG ships with a small
helper program @command{libTMCG-config} that knows the path to the
include file and other configuration options. The options that need
to be added to the compiler invocation at compile time are output by
the @option{--cflags} option to @command{libTMCG-config}. The following
example shows how it can be used at the command line:

@example
g++ -c foo.cc `libTMCG-config --cflags`
@end example

Adding the output of @samp{libTMCG-config --cflags} to the compilers
command line will ensure that the compiler can find the library header
file.

A similar problem occurs when linking the program with the library.
Again, the compiler has to find the library files. For this to work,
the path to the library files has to be added to the library search
path (via the @option{-L} option). For this, the option @option{--libs}
to @command{libTMCG-config} can be used. For convenience, this option
also outputs all other options that are required to link the program
with the library (in particular, the @samp{-lTMCG} option). The example
shows how to link @file{foo.o} with LibTMCG to a program @command{foo}.

@example
g++ -o foo foo.o `libTMCG-config --libs`
@end example

Of course you can also combine both examples to a single command by
specifying both options to @command{libTMCG-config}:

@example
g++ -o foo foo.c `libTMCG-config --cflags --libs`
@end example

@c **********************************************************
@section Building sources using GNU Automake
It is much easier if you use GNU Automake instead of writing your own
Makefiles. If you do that you do not have to worry about finding and
invoking the @command{libTMCG-config} script at all.
LibTMCG provides an extension to Automake that does all
the work for you.

@defmac AM_PATH_LIBTMCG (@ovar{minimum-version}, @ovar{action-if-found}, @ovar{action-if-not-found})
Check whether LibTMCG (at least version @var{minimum-version}, if given)
exists on the host system. If it is found, execute @var{action-if-found},
otherwise do @var{action-if-not-found}, if given.

Additionally, the function defines @code{LIBTMCG_CFLAGS} to the
flags needed for compilation of the program to find the @file{libTMCG.hh}
header file, and @code{LIBTMCG_LIBS} to the linker flags needed to link
the program with LibTMCG.
@end defmac

Thus you can use the defined Autoconf variables like this in your
@file{Makefile.am}:

@example
AM_CPPFLAGS = $(LIBTMCG_CFLAGS)
LDADD = $(LIBTMCG_LIBS)
@end example

@c **********************************************************
@section Initializing the library
The first step you have to accomplish is to initalize LibTMCG.
The following function must be invoked early in your program,
that means, before you make use of any other capability.

@deftypefun bool init_libTMCG ()
The function checks whether the installed third-party libraries
match their required versions. Further it initalize them
and returns @code{true}, if everything was sound. Otherwise
@code{false} is returned and an appropriate error message
is sent to @code{stderr}.
@end deftypefun

@chapter Application Programming Interface

@chapter Example


@c **********************************************************
@c *******************  Appendices  *************************
@c **********************************************************
@include gpl.texi
@include fdl.texi

@unnumbered General Index
@printindex cp

@unnumbered API Index
@printindex fn




@bye
