.TH DKG\-GENERATE "1" "July 2017" "LibTMCG 1.3.2" "User Commands"

.SH NAME
dkg\-generate \- distributed key generation for OpenPGP

.SH SYNOPSIS
.B dkg\-generate
.RI [ options ]
.IR PEERS

.SH DESCRIPTION
This program performs the t-resilient distributed key generation protocol (DKG)
by Gennaro et al. for discrete logarithm based cryptosystems as described in
.I "Journal of Cryptology, Vol. 20(1) 2007".
Additionally, it can start instances of the adaptively-secure threshold DSS
protocol (tDSS) by Canetti et al. as given in the extended version of a paper
that appeared under the title
.I "Adaptive Security for Threshold Cryptosystems"
in the proceedings of CRYPTO'99. Both protocols employ GNUnet for exchange of
internal protocol messages between the participants. Thus a working GNUnet peer
is neccesary to proceed. 
.PP
For each party either an individual or a shared DSA signing key is generated.
This key acts as the OpenPGP primary key. The shared ElGamal key for encryption
is arranged as subkey. Thus each party should verify after key generation, that
the published public key of the group contains this shared ElGamal key, if no
shared DSA signing key is used. The program generates three different files:
First, a file with the extension .dkg which contains the internal state of the
DKG protocol including some verification keys for threshold decryption, second,
a file that stores the individual private key shares in ASCII-armored OpenPGP
format, and finally, a file that contains the public key again in ASCII-armored
format. All files have as a common prefix of their name the GNUnet peer identity
of the corresponding party, i.e., the given argument list from
.IR "PEERS".
The second file must be kept confidential. A passphrase can be used to protect
the private key by a simple OpenPGP S2K encryption scheme. If an empty passphrase
is entered, then the secrets are stored in plain text and have to be protected
otherwise.
.PP
The parameter t determines how many parties may deviate from the protocol
during the key generation and later during threshold decryption. At least
t+1 participants are needed to recover a key share or to decrypt a OpenPGP
message. This parameter can be adjusted by using the option "-t". The default
value is (n-1)/2 where n is the number of participants. Since 0-resilience and
other artificial deviations are not desireable, the program ensures by
clipping that 0 < t <= n holds.
.PP
The option "-s" defines the parameter s, i.e., the s-resilience of the tDSS
protocol. At least 2s+1 participants are required to create a signature for the
shared DSA primary key, however, s+1 parties can recover all secret key shares.
The default value for s is (n-1)/2. The generation of an unique shared DSA
key is disabled, if s is set to zero. In that case individual DSA keys are
generated.
.PP
The underlying DDH-hard group, i.e., a large prime-order subgroup of special
form that sometimes is called Schnorr group, can be adjusted by using the
option "-g". The included program
.BR dkg\-gencrs
generates a corresponding common reference string on that all participants
must agree. The security level is increased for each given dummy argument of
this program. The generated group parameters are verifiable up to a certain
level. However, it is recommended that this crucial part of the setup is
either accomplished by some trusted members or all participants together.
Without this option the hard coded group in the source code (|p| = 2048 bit,
|q| = 256 bit) is used by default. It was created by the author of the program.
.PP
With the option "-w" the number of minutes can be adjusted until the DKG
protocol is started. The default value is 5. It is crucial for the key
generation that all participants are connected with GNUnet CADET within
this waiting time. Otherwise the distributed key generation may fail.

.SH OPTIONS
Arguments mandatory for long options are also mandatory for short options.
Please note that interpreting of almost all options is done by a library
function of GNUnet. Thus this program has to be compiled accordingly.
.TP
\fB\-c\fR, \fB\-\-config\fR=\fI\,FILENAME\/\fR
use GNUnet configuration file FILENAME
.TP
\fB\-g\fR, \fB\-\-group\fR
common reference string that defines the underlying DDH-hard group
.TP
\fB\-h\fR, \fB\-\-help\fR
print this help
.TP
\fB\-L\fR, \fB\-\-log\fR=\fI\,LOGLEVEL\/\fR
configure logging to use LOGLEVEL
.TP
\fB\-l\fR, \fB\-\-logfile\fR=\fI\,FILENAME\/\fR
configure logging to write logs to FILENAME
.TP
\fB\-p\fR, \fB\-\-port\fR
GNUnet CADET port to listen/connect
.TP
\fB\-s\fR, \fB\-\-s\-resilience\fR
resilience of threshold DSS (tDSS) protocol
.TP
\fB\-t\fR, \fB\-\-t\-resilience\fR
resilience of DKG protocol
.TP
\fB\-v\fR, \fB\-\-version\fR
print the GNUnet version number
.TP
\fB\-V\fR, \fB\-\-verbose\fR
turn on verbose output
.TP
\fB\-w\fR, \fB\-\-wait\fR
minutes to wait until start of DKG/tDSS protocol

.SH "SECURITY"
The current implementation is in experimental state and should NOT
be used in production environments.

.SH "REPORTING BUGS"
Security vulnerabilities or cryptographic complaints should be reported
via an email directly to
<HeikoStamer@gmx.net>.
Reported problems will be published after they've been fixed.
.PP
Please report other bugs via <http://savannah.nongnu.org/bugs/?group=libtmcg>
.PP
Home page of LibTMCG: <http://www.nongnu.org/libtmcg/>

.SH "EXAMPLES"
.TP
The following command initiates a distributed key generation process with four participants defined by their GNUnet peer identities. 
.PP
.nf
.RS
dkg-generate -w 10 -s 0 -t 2 WS3KHEYKKF6QQ6NDQKKCJ2B374RSSXJ05TB5D9W9FYKPPEJ3QKFG XS72STGDBKT6YRRVF8CPMGJFZ0FEYQE9EJECDNXWZJSB5G5H4ZVG 3PT18Z2345NA6FM86BKVJ32DK88KXF0YWKTDPPQX1QJMBPEF4530 S41SNHFSGVR3A88ZPX3ZB3BKD2EN0Z29VEKKS1BMVMQNMWSRG3N0
.RE
.fi
.PP
Each party must run such a process with identical parameter set, i.e., please configure always the same t-resilience. Note that,
e.g. 2-resilience, means that later at least three participants are needed in order to decrypt a message for the generated common
ElGamal subkey. However, robustness of the DKG protocol is only guaranteed for t < n/2 which is violated in this example. Thus a
malicious party may disturb the key generation without being identified and excluded. The s-resilience is set to zero, which
means that individual DSA keys instead of a shared unique primary key are generated. The program waits ten minutes before the
main DKG protocol is started, because establishing a CADET channel with GNUnet may take some time.

.SH "SEE ALSO"
.BR dkg\-encrypt (1),
.BR dkg\-decrypt (1)

