.TH DKG\-GENERATE "1" "March 2017" "LibTMCG 1.3.0" "User Commands"

.SH NAME
dkg\-generate \- distributed key generation for OpenPGP

.SH SYNOPSIS
.B dkg\-generate
.RI [ options ]
.IR PEERS

.SH DESCRIPTION
This program performs the t-resilient distributed key generation protocol (DKG)
for discrete logarithm based cryptosystems as described in Journal of Cryptology
20(1) by Gennaro et al.
It employs GNUnet for exchange of protocol messages between the participants.
Thus a working GNUnet peer is neccesary to proceed. 
.br
For each party an individual DSA signing key is generated which is the OpenPGP
primary key. The shared ElGamal key for encryption is arranged as subkey. Thus
each party should verify after key generation, that the published public key
of the group contains this shared ElGamal key. The program generates three
different files: First, a file with the extension .dkg which contains the
internal state of the DKG protocol including some verification keys for
threshold decryption, second, a file that stores the individual private key in
ASCII-armored OpenPGP format, and finally, a file that contains the public key
again in ASCII-armored format. All file names have the GNUnet peer identity of
the corresponding party as a common prefix.
.br
The parameter t determines how many parties may deviate from the protocol
during the key generation and later during threshold decryption. At least
t+1 participants are needed to recover or to decrypt a OpenPGP message.
This parameter can be adjusted by using the option "-t". The default value
is (n-1)/2 where n is the number of participants. Since 0-resilience and
other deviations are not desireable, the program ensures that 0 < t <= n holds. 
.br
The underlying DDH-hard group, i.e. a prime order subgroup of special form,
can be adjusted by using the option "-g". The included program dkg\-gencrs
generates a different corresponding common reference string on that all 
participants must agree. The generated group parameters are verifiable up
to a certain level. However, it is recommended that this crucial part is
accomplished by some trusted members or all participants together.
.br
With the option "-w" the number of minutes can be adjusted until the DKG
protocol is started. The default value is 5. It is crucial for the key
generation that all participants are connected with GNUnet CADET within
this waiting time.

.SH OPTIONS
Arguments mandatory for long options are also mandatory for short options.
.TP
\fB\-c\fR, \fB\-\-config\fR=\fI\,FILENAME\/\fR
use GNUnet configuration file FILENAME
.TP
\fB\-g\fR, \fB\-\-group\fR
common reference string that defines the underlying DDH-hard group
.TP
\fB\-h\fR, \fB\-\-help\fR
print this help
.TP
\fB\-L\fR, \fB\-\-log\fR=\fI\,LOGLEVEL\/\fR
configure logging to use LOGLEVEL
.TP
\fB\-l\fR, \fB\-\-logfile\fR=\fI\,FILENAME\/\fR
configure logging to write logs to FILENAME
.TP
\fB\-p\fR, \fB\-\-port\fR
GNUnet CADET port to listen/connect
.TP
\fB\-t\fR, \fB\-\-t\-resilience\fR
resilience of DKG protocol
.TP
\fB\-v\fR, \fB\-\-version\fR
print the GNUnet version number
.TP
\fB\-w\fR, \fB\-\-wait\fR
minutes to wait until start of DKG protocol

.SH "SECURITY"
The current implementation is in experimental state and should NOT
be used in production environments.

.SH "REPORTING BUGS"
Security vulnerabilities or cryptographic complaints should be reported
via an email directly to
<HeikoStamer@gmx.net>.
Reported problems will be published after they've been fixed.
.br
Please report other bugs via <http://savannah.nongnu.org/bugs/?group=libtmcg>
.br
Home page of LibTMCG: <http://www.nongnu.org/libtmcg/>

.SH "EXAMPLES"
TODO

.SH "SEE ALSO"
dkg\-encrypt(1), dkg\-decrypt(1)

