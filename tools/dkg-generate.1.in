.TH DKG\-GENERATE "1" "August 2017" "@PACKAGE_NAME@ @PACKAGE_VERSION@" "User Commands"

.SH NAME
dkg\-generate \- distributed key generation for OpenPGP

.SH SYNOPSIS
.B dkg\-generate
.RI [ options ]
.IR PEERS

.SH DESCRIPTION
This program implements the t-resilient distributed key generation protocol (DKG)
by Gennaro et al. for discrete logarithm based cryptosystems as described in
.I "Journal of Cryptology, Vol. 20(1), 2007".
Additionally, it can perform the adaptively-secure threshold DSS protocol (tDSS)
by Canetti et al. for generating a shared DSA key as proposed in the extended
version of a paper appeared under the title
.I "Adaptive Security for Threshold Cryptosystems"
in the proceedings of CRYPTO'99. Both protocols employ GNUnet or a simple built-in
TCP/IP service as underlying peer-to-peer (P2P) network for exchange of internal
protocol messages between the participants. Thus either a working GNUnet peer or
a host with appropriate TCP/IP port forwarding (e.g. via Tor Hidden Service) is
neccesary to proceed. Otherwise only local test instances are started.
.PP
For each party either an individual or a shared DSA signing key is generated.
This key acts as OpenPGP's primary key. Then the shared ElGamal encryption key
is arranged as subkey. Thus each party should verify after key generation, that
the published public key of the group contains this shared ElGamal key, if no
shared DSA signing key is used as integrity measure. The program generates two
different files: First, one file that stores the individual private key shares in
ASCII-armored OpenPGP format (experimental public-key algorithm IDs 108 an 109),
and second, another file that contains the public keys again in ASCII-armored
format. These files have as a common prefix of their filename the GNUnet peer
identity or the hostname of the calling party, i.e., the corresponding string
from the n-element list
.IR "PEERS". 
The first file must be kept confidential. A passphrase can be used to protect
the private keys by a simple OpenPGP S2K encryption scheme. If an empty passphrase
is entered, then the corresponding secrets are stored in plain text and have
to be protected otherwise.
.PP
The parameter t determines how many parties may deviate from the DKG protocol
during the key generation and later during threshold decryption. At least
t+1 participants are needed to recover a key share or to decrypt a OpenPGP
message. This parameter can be adjusted by using the option "-t". The default
value is (n-1)/2 where n is the number of participants. If the program is
called with a zero t-resilience (i.e. "-t 0"), then no ElGamal encryption
subkey is generated. It is always ensured by clipping that t <= n holds.
.PP
The option "-s" defines the parameter s, i.e., the s-resilience of the tDSS
protocol. At least 2s+1 participants are required to create a signature of the
shared DSA primary key, however, s+1 parties can recover all secret key shares.
The default value for s is (n-1)/2. The generation of an unique shared DSA
key is disabled, if parameter s is set to zero. In that case individual DSA keys
are generated which allow full control over the shared encryption subkey.
.PP
The underlying DDH-hard group, i.e., a large prime-order subgroup of special
form (sometimes called Schnorr group), can be tweaked by using the option "-g"
with a common reference string (CRS) also known as domain parameter set. The
included program
.BR dkg\-gencrs
generates such a string on that all participants must agree. The security
level is increased for each remaining dummy argument of dkg\-gencrs.
The generated domain parameters are verifiable up to a certain
level. In particular there is an option for compliance with FIPS 186-4.
However, it is recommended that this crucial part of the setup is either
accomplished by some trusted members or all participants together.
Without option "-g" a hard coded group with |p| = 2048 bit and |q| = 256 bit
is used by default. It was created by the author of the program at random
and is fully compatible with DSA as defined in RFC 4880. Other choices may
not be supported by all OpenPGP implementations.
.PP
With the option "-w" the number of minutes can be adjusted until DKG/tDSS
protocols are started. The default value is 5. It is crucial for the key
generation that all participants are connected with GNUnet CADET within
this waiting time. Otherwise the distributed key generation may fail.
.PP
The established private communication channels for the protocols should be
protected with bilateral exchanged passwords for encryption and message
authentication, if the underlying P2P network does not guarantee required
confidentiality and integrity by itself. Moreover, the broadcast channel
has to be authenticated too. The passwords for all channels are defined
as a string, where a slash (/) marks the end of each password.
The order of the passwords depends on position of each peer in the
canonicalized peer list, i.e., the sorted unique list of given PEERS. For
example, if participant P_0 uses A/B/C/ as password string, then "B" is
the password for his channel to P_1 and "C" is the password for his channel
to P_2. That means P_1 and P_2 have to provide matching password strings,
i.e., B/D/E/ and C/E/F/, respectively. The default value of option "-P" is
an empty password string (simple default passwords) based on the assumption,
that GNUnet will protect the exchanged protocol messages.
.PP
Additionally, instead of relying on GNUnet CADET protocol the messages can
be exchanged by the built-in TCP/IP communication framework. In that case
the given peer identities from PEERS are simple resolvable hostnames and the
corresponding option "-H" defines the hostname of the calling peer within
that list. The program binds some TCP ports up from 55000 to listen for
incoming connections and connects to other peers in that port range.
Since the communication is not protected by the network itself "-P" is
a mandatory option in that case.
.PP
The included program 
.BR dkg\-keyinfo
shows some basic information about the private key. Finally, the program
.BR dkg\-refresh
updates the individual DSA key shares and thus provides proactive security
against a so-called mobile adversary, if it is used regularly. It should be
used very carefully because all parties not involved in the refreshment are
excluded (disqualified) from all further private key operations of a successful
majority.

.SH OPTIONS
Arguments mandatory for long options are also mandatory for short options.
Please note that interpreting of almost all options is done by a library
function of GNUnet. Thus this program has to be compiled accordingly.
.TP
\fB\-c\fR, \fB\-\-config\fR=\fI\,FILENAME\/\fR
use GNUnet configuration file FILENAME
.TP
\fB\-e\fR, \fB\-\-expiration\fR=\fI\,TIME\/\fR
expiration time of generated keys in seconds
.TP
\fB\-g\fR, \fB\-\-group\fR=\fI\,STRING\/\fR
common reference string that defines the underlying DDH-hard group
.TP
\fB\-h\fR, \fB\-\-help\fR
print this help
.TP
\fB\-H\fR, \fB\-\-hostname\fR=\fI\,STRING\/\fR
hostname (e.g. onion address) of this peer within PEERS
.TP
\fB\-L\fR, \fB\-\-log\fR=\fI\,LOGLEVEL\/\fR
configure logging to use LOGLEVEL
.TP
\fB\-l\fR, \fB\-\-logfile\fR=\fI\,FILENAME\/\fR
configure logging to write logs to FILENAME
.TP
\fB\-p\fR, \fB\-\-port\fR=\fI\,STRING\/\fR
GNUnet CADET port to listen/connect
.TP
\fB\-P\fR, \fB\-\-passwords\fR=\fI\,STRING\/\fR
exchanged passwords to protect private and broadcast channels
.TP
\fB\-s\fR, \fB\-\-s\-resilience\fR=\fI\,INTEGER\/\fR
resilience of threshold DSS protocol (signature scheme)
.TP
\fB\-t\fR, \fB\-\-t\-resilience\fR=\fI\,INTEGER\/\fR
resilience of DKG protocol (threshold decryption)
.TP
\fB\-v\fR, \fB\-\-version\fR
print the GNUnet version number
.TP
\fB\-V\fR, \fB\-\-verbose\fR
turn on verbose output
.TP
\fB\-w\fR, \fB\-\-wait\fR=\fI\,TIME\/\fR
minutes to wait until start of DKG/tDSS protocol

.SH "SECURITY"
The current implementation is in experimental state and should NOT
be used in production environments. Note that for the key generation
a lot of good randomness is required. Please ensure that your
system can provide these randomness for libgcrypt without exceeding
the defined protocol timeouts.

.SH "REPORTING BUGS"
Security vulnerabilities or cryptographic complaints should be reported
via an email directly to
<HeikoStamer@gmx.net>.
Reported problems will be published after they've been fixed.
.PP
Please report other bugs via <http://savannah.nongnu.org/bugs/?group=libtmcg>
.PP
Home page of LibTMCG: <http://www.nongnu.org/libtmcg/>

.SH "EXAMPLES"
.TP
The following command initiates a distributed key generation process with four participants defined by their GNUnet peer identities (WS3K...QKFG, XS72...4ZVG, 3PT1...4530, S41S...G3N0). 
.PP
.nf
.RS
dkg-generate -w 10 -s 0 -t 2 WS3KHEYKKF6QQ6NDQKKCJ2B374RSSXJ05TB5D9W9FYKPPEJ3QKFG XS72STGDBKT6YRRVF8CPMGJFZ0FEYQE9EJECDNXWZJSB5G5H4ZVG 3PT18Z2345NA6FM86BKVJ32DK88KXF0YWKTDPPQX1QJMBPEF4530 S41SNHFSGVR3A88ZPX3ZB3BKD2EN0Z29VEKKS1BMVMQNMWSRG3N0
.RE
.fi
.PP
Each party must run such a process with identical parameter set, i.e., please configure always the same t-resilience. Note that,
e.g. 2-resilience, means that later at least three participants are needed in order to decrypt messages for the generated common
ElGamal subkey. However, robustness of the DKG protocol is only guaranteed for t < n/2 which is violated in this example. Thus a
malicious party may disturb the key generation without being identified and excluded. The s-resilience is set to zero, which
means that individual DSA keys instead of a shared key are generated and used as OpenPGP primary keys. Thus
.BR dkg\-sign (1)
will not work with such keys. The program waits ten minutes before the DKG protocol is started, because
establishing a CADET channel with GNUnet may take some time.
.PP
Instead of using GNUnet for message exchange the built-in TCP/IP service can carry out this job. However, then each peer has to
be reachable by all other peers over the underlying network. Resolvable hostnames are used as peer identities: 
PP
.nf
.RS
dkg-generate -t 2 -P secret1/secret2/secret3/secret4/ -H host2.example.com host1.example.com host2.example.com host3.example.com host4.example.com  
.RE
.fi
The s-resilience is non-zero in this example, which means that a shared DSA key is generated and used as OpenPGP primary key. Thus
the contained shared ElGamal encryption subkey is protected against individual manipulation. 
.PP
Last but not least, in the following example only a shared DSA key, e.g. for jointly code signing, is generated:
.nf
.RS
dkg-generate -t 0 -P secret1/secret2/secret3/ -H supertapir evilsloth supertapir lazyhedgehog 
.RE
.fi

.SH "COPYRIGHT"
.TP
Copyright (C)  2017 Heiko Stamer <HeikoStamer@gmx.net>
.PP
Permission is granted to copy, distribute and/or modify this document under
the terms of the GNU Free Documentation License, Version 1.3 or any later
version published by the Free Software Foundation; with no Invariant Sections,
no Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included
in the sources of this package and additionally can be obtained from Internet
<https://www.gnu.org/licenses>.

.SH "SEE ALSO"
.BR dkg\-encrypt (1),
.BR dkg\-decrypt (1),
.BR dkg\-sign (1),
.BR dkg\-revoke (1)

